// Author  : Lewis Ward
// Program : Small Maths Library
// Date    : 20/03/2016
#pragma once
#include "Mat4.h"

namespace math
{
	//----------------------------------------------------------------------------------------------------------------------
	/// \brief Quaternion
	//----------------------------------------------------------------------------------------------------------------------
	class Quat
	{
	public:

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief	Constructor, uninitialised Quat
		//----------------------------------------------------------------------------------------------------------------------
		Quat();

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief	Copy constructor
		/// \prama  math::Quat
		//----------------------------------------------------------------------------------------------------------------------
		Quat(const Quat& quat);

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief	Constructor, initialised from matrix
		/// \prama  math::Mat4
		//----------------------------------------------------------------------------------------------------------------------
		Quat(const math::Mat4& matrix);

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief	Constructor, initialised from four floats
		/// \prama  float
		/// \prama  float
		/// \prama  float
		/// \prama  float
		//----------------------------------------------------------------------------------------------------------------------
		Quat(const float& X, const float& Y, const float& Z, const float& W);

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief	Destructor
		//----------------------------------------------------------------------------------------------------------------------
		~Quat();

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief	check to see if two Quat's are equal to each other
		/// \prama  math::Quat
		/// \return bool true if equal
		//----------------------------------------------------------------------------------------------------------------------
		bool equals(Quat& q);

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief	get the euler of this Quat in a matrix
		/// \return math::Matrix
		/// \note		expects to be a before unit quaterion before called
		//----------------------------------------------------------------------------------------------------------------------
		math::Mat4 toMatrix();

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief	make a Quat from an axis and angle
		/// \prama	math::Vec3	axis
		/// \prama	float				radians (NOT degrees)
		//----------------------------------------------------------------------------------------------------------------------
		inline void toAxisAngle(const math::Vec3& axis, const float& radians)
		{
			float sa = std::sinf(radians * 0.5f);
			x = axis.x * sa;
			y = axis.y * sa;
			z = axis.z * sa;
			w = std::sinf(radians * 0.5f);
		}

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief	linear interpolation between two Quats
		/// \prama  math::Quat 
		/// \prama  math::Quat
		/// \prama  float
		/// \return	math::Quat
		//----------------------------------------------------------------------------------------------------------------------
		math::Quat lerp(const Quat& a, const Quat& b, float& s);

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief	get the rotate of X axis plane
		/// \return math::Vec3
		//----------------------------------------------------------------------------------------------------------------------
		math::Vec3 getXAxis();

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief	get the rotate of Y axis plane
		/// \return math::Vec3
		//----------------------------------------------------------------------------------------------------------------------
		math::Vec3 getYAxis();

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief	get the rotate of Z axis plane
		/// \return math::Vec3
		//----------------------------------------------------------------------------------------------------------------------
		math::Vec3 getZAxis();

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief	normalise the Quat
		//----------------------------------------------------------------------------------------------------------------------
		void normalise(const math::Quat& q);

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief	inverse this Quat
		/// \return math::Quat
		//----------------------------------------------------------------------------------------------------------------------
		inline math::Quat inverse();

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief	check if the Quat is normalised
		/// \return bool true if normalised
		//----------------------------------------------------------------------------------------------------------------------
		bool isNormalise();

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief	rotate the vector by this Quat
		/// \prama  math::Vec3 the vector to be rotated
		/// \return math::Vec3 
		//----------------------------------------------------------------------------------------------------------------------
		math::Vec3 rotateVector(math::Vec3& v);

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief	inverse rotate a vector by this Quat
		/// \prama  math::Vec3 the vector to be unrotated
		/// \return math::Vec3 
		//----------------------------------------------------------------------------------------------------------------------
		math::Vec3 inverseVector(math::Vec3& v);

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief	dot product
		/// \prama	math::Quat
		/// \prama	math::Quat
		//----------------------------------------------------------------------------------------------------------------------
		inline float dot(const math::Quat& a, const math::Quat& b)
		{ return (a.x * b.x) + (a.y * b.y) + (a.z * b.z) + (a.w * b.w); }

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief	magnitude
		/// \prama	math::Quat
		//----------------------------------------------------------------------------------------------------------------------
		inline float magnitude(const math::Quat& a)
		{ return std::sqrt(magnitudeDot(a)); }

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief	magnitude squared
		/// \prama	math::Quat
		//----------------------------------------------------------------------------------------------------------------------
		inline float magnitudeDot(const math::Quat& a)
		{ return dot(a, a); }


		//----------------------------------------------------------------------------------------------------------------------
		/// \brief	add a Quat to this Quat
		/// \prama	math::Quat
		/// \prama	math::Quat
		//----------------------------------------------------------------------------------------------------------------------
		void add(const math::Quat& a, const math::Quat& b)
		{
			x = a.x + b.x;
			y = a.y + b.y;
			z = a.z + b.z;
			w = a.w + b.w;
		}

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief	subtract a Quat to this Quat
		/// \prama	math::Quat
		/// \prama	math::Quat
		//----------------------------------------------------------------------------------------------------------------------
		void sub(const math::Quat& a, const math::Quat& b)
		{
			x = a.x - b.x;
			y = a.y - b.y;
			z = a.z - b.z;
			w = a.w - b.w;
		}

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief	multiply a Quat to this Quat
		/// \prama	math::Quat
		/// \prama	math::Quat
		//----------------------------------------------------------------------------------------------------------------------
		void mul(const math::Quat a, const math::Quat b)
		{
			x = b.w * a.x + b.x * a.w + a.y * b.z - a.z * b.y;
			y = b.w * a.y + b.y * a.w + a.z * b.x - a.x * b.z;
			z = b.w * a.z + b.z * a.w + a.x * b.y - a.y * b.x;
			w = b.w * a.w - b.x * a.x - a.y * b.y - a.z * b.z;
		}

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief	multiply a Quat to this Quat
		/// \prama	math::Quat
		/// \prama	math::Vec3
		//----------------------------------------------------------------------------------------------------------------------
		void mul(const math::Quat& a, const math::Vec3& b)
		{
			x = b.x * a.w + a.y * b.z - a.z * b.y;
			y = b.y * a.w + a.z * b.x - a.x * b.z;
			z = b.z * a.w + a.x * b.y - a.y * b.x;
			w = -b.x * a.x + a.y * b.y - a.z * b.z;
		}

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief	multiply a float to this Quat
		/// \prama	math::Quat
		/// \prama	float
		//----------------------------------------------------------------------------------------------------------------------
		void mul(const math::Quat& a, const float& b)
		{
			x = b * a.x + b * a.w + b * a.z - b * a.y;
			y = b * a.y + b * a.w + b * a.x - b * a.z;
			z = b * a.z + b * a.w + b * a.y - b * a.x;
			w = b * a.w + b * a.x + b * a.y - b * a.z;
		}


		float x; ///< i
		float y; ///< j
		float z; ///< k
		float w; ///< 1
	};

	inline const math::Quat operator *= (math::Quat& a, const math::Quat& b) { a.mul(a, b); return a; }

	inline const math::Quat operator * (math::Quat& a, const float& b) { a.mul(a, b); return a; }

	inline const math::Quat operator * (const math::Quat& a, const math::Quat& b) { math::Quat r; r.mul(a, b); return r; }

	inline const math::Quat operator + (const math::Quat& a, const float& b) 
	{ math::Quat t(a.x + b, a.y + b, a.z + b, a.w);  return t; }

	inline const math::Quat operator + (const math::Quat& a, const math::Quat& b)
	{ math::Quat t(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);  return t; }

	inline const math::Quat operator - (const math::Quat& a, const math::Quat& b)
	{ math::Quat t(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);  return t; }

}; ///< end of namespace
